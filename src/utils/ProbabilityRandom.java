package utils;

import java.util.Random;
import java.util.stream.Stream;

/**
 * @author hacke
 *
 * class to deal with randoms that have a chance of occuring
 * not a singleton, to discourage singleton usage
 */

public final class ProbabilityRandom {

    private Random random = new Random(System.nanoTime());

    public ProbabilityRandom(final long seed){
        random.setSeed(seed);
    }

    /**
     * Allows for booleans that have a chance of being true
     *
     * @param chance value in range [0, 1.0) to represent chance of being true
     * @return a weighted boolean
     */
    public boolean nextWeightedBoolean(final double chance){
        if(chance > 0.99 || chance < 0) throw new IllegalArgumentException("chance is invalid, must be in range [0, 1.0)");
        return random.nextDouble() < chance;
    }

    /**
     * Returns a stream of booleans generated by the nextWeightedBoolean method
     *
     * @param chance value in range [0, 1.0) to represent chance of being true
     * @return a weighted boolean
     */
    public Stream<Boolean> createStream(final double chance){
        if(chance > 0.99 || chance < 0) throw new IllegalArgumentException("chance is invalid, must be in range [0, 1.0)");
        return Stream.generate(()->nextWeightedBoolean(chance));
    }

    @Override
    public String toString() {
        return "ProbabilityRandom{}";
    }
}
